name: CI/CD

on:
  push:
    tags:
      - "*v*.*.*"
  workflow_dispatch: {}

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.target.runner }}
    strategy:
      matrix:
        rust:
          - nightly
        target:
          - runner: ubuntu-latest
            arch: x86_64-unknown-linux-gnu
          - runner: ubuntu-latest
            arch: aarch64-unknown-linux-gnu
          - runner: windows-latest
            arch: x86_64-pc-windows-msvc
          - runner: macos-latest
            arch: x86_64-apple-darwin
          - runner: macos-latest
            arch: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target.arch }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --verbose

  build:
    name: Build Release
    needs: test
    runs-on: ${{ matrix.target.runner }}
    strategy:
      matrix:
        rust:
          - nightly
        target:
          - runner: ubuntu-latest
            arch: x86_64-unknown-linux-gnu
            artifact_name: ccver-linux-amd64
          - runner: ubuntu-24.04-arm
            arch: aarch64-unknown-linux-gnu
            artifact_name: ccver-linux-arm64
          - runner: windows-latest
            arch: x86_64-pc-windows-msvc
            artifact_name: ccver-windows-amd64.exe
          - runner: macos-13
            arch: x86_64-apple-darwin
            artifact_name: ccver-macos-amd64
          - runner: macos-latest
            arch: aarch64-apple-darwin
            artifact_name: ccver-macos-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target.arch }}

      - name: Install cross-compilation dependencies
        if: matrix.target.arch == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install targets
        run: rustup target add ${{ matrix.target.arch }}

      - name: Build target
        run: cargo build --release --target ${{ matrix.target.arch }}

      - name: Prepare binary
        shell: bash
        run: |
          if [ "${{ matrix.target.runner }}" = "windows-latest" ]; then
            cp target/${{ matrix.target.arch }}/release/ccver.exe ${{ matrix.target.artifact_name }}
          else
            cp target/${{ matrix.target.arch }}/release/ccver ${{ matrix.target.artifact_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.artifact_name }}
          path: ${{ matrix.target.artifact_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: contains(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ccver-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
