name: CI/CD

on:
  workflow_run: 
    workflows: ["Auto Tag"]
    types:
      - completed
  workflow_dispatch: {}

permissions: 
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Release
    runs-on: ${{ matrix.target.runner }}
    strategy:
      matrix:
        rust:
          - nightly
        target:
          - runner: ubuntu-latest
            arch: x86_64-unknown-linux-gnu
            artifact_name: ccver-linux-amd64
          - runner: ubuntu-24.04-arm
            arch: aarch64-unknown-linux-gnu
            artifact_name: ccver-linux-arm64
          - runner: windows-latest
            arch: x86_64-pc-windows-msvc
            artifact_name: ccver-windows-amd64.exe
          - runner: macos-13
            arch: x86_64-apple-darwin
            artifact_name: ccver-macos-amd64
          - runner: macos-latest
            arch: aarch64-apple-darwin
            artifact_name: ccver-macos-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target.arch }}

      - name: Install cross-compilation dependencies
        if: matrix.target.arch == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install targets
        run: rustup target add ${{ matrix.target.arch }}

      - name: Build target
        run: cargo build --release --target ${{ matrix.target.arch }}

      - name: Prepare binary
        shell: bash
        run: |
          if [ "${{ matrix.target.runner }}" = "windows-latest" ]; then
            cp target/${{ matrix.target.arch }}/release/ccver.exe ${{ matrix.target.artifact_name }}
          else
            cp target/${{ matrix.target.arch }}/release/ccver ${{ matrix.target.artifact_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.artifact_name }}
          path: ${{ matrix.target.artifact_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event.workflow_run.head_branch == 'master'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0


      - name: Download artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ccver-*
      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
      - run: ls -al 
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get-latest-tag.outputs.tag }}
          files: |
            ./ccver-linux-amd64
            ./ccver-linux-arm64
            ./ccver-windows-amd64.exe
            ./ccver-macos-amd64
            ./ccver-macos-arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
