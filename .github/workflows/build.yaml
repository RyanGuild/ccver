name: Build

on:
  workflow_call:
    secrets:
      APPLE_CERTIFICATE_DATA:
        description: 'The certificate data for signing the macOS binary'
        required: true
      APPLE_CERTIFICATE_PASSWORD:
        description: 'The certificate password for signing the macOS binary'
        required: false
      APPLE_TEAM_ID:
        description: 'The team ID for signing the macOS binary'
        required: true
  workflow_dispatch: {}

permissions:
  id-token: write
  attestations: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: üõ†Ô∏è
    runs-on: ${{ matrix.target.runner }}
    strategy:
      matrix:
        rust:
          - nightly
        target:
          - runner: ubuntu-latest
            arch: x86_64-unknown-linux-gnu
            artifact_name: ccver-linux-amd64
          - runner: ubuntu-24.04-arm
            arch: aarch64-unknown-linux-gnu
            artifact_name: ccver-linux-arm64
          - runner: windows-latest
            arch: x86_64-pc-windows-msvc
            artifact_name: ccver-windows-amd64.exe
          - runner: macos-13
            arch: x86_64-apple-darwin
            artifact_name: ccver-macos-amd64
          - runner: macos-latest
            arch: aarch64-apple-darwin
            artifact_name: ccver-macos-arm64

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Get Rust Cache
        uses: ./.github/actions/rust_depcache
        with:
          runner: ${{ matrix.target.runner }}
          arch: ${{ matrix.target.arch }}
          rust: ${{ matrix.rust }}

      - name: Build target
        run: cargo build --release --target ${{ matrix.target.arch }}

      - name: Prepare binary
        shell: bash
        run: |
          if [ "${{ matrix.target.runner }}" = "windows-latest" ]; then
            cp target/${{ matrix.target.arch }}/release/ccver.exe ${{ matrix.target.artifact_name }}
          else
            cp target/${{ matrix.target.arch }}/release/ccver ${{ matrix.target.artifact_name }}
          fi

      - name: Sign Apple binary
        if: ${{ matrix.target.runner == 'macos-latest' || matrix.target.runner == 'macos-13' }}
        uses: lando/code-sign-action@v3
        with:
          file: ${{ matrix.target.artifact_name }}
          certificate-data: ${{ secrets.APPLE_CERTIFICATE_DATA }}
          certificate-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD}}
          certificate-id: ${{ secrets.APPLE_TEAM_ID }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ${{ matrix.target.artifact_name }}


      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.artifact_name }}
          path: ${{ matrix.target.artifact_name }}
